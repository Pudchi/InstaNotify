package com.pudchi.slidewarn;import android.content.Intent;import android.os.Bundle;import android.os.Message;import android.support.v4.app.Fragment;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.DefaultItemAnimator;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.Button;import android.widget.TextView;import java.util.ArrayList;public class HistoryFragment extends Fragment implements UpdateableFragment {    public static final String PAGE = "PAGE";    public static int posi = 3;    static int i = 0;    int[] pic = {R.drawable.ic_error_black_48dp, R.drawable.ic_check_circle_black_48dp};    DefaultItemAnimator animator = new DefaultItemAnimator();    TextView lbl;    Button gotologin;    RecyclerView mRecyclerView;    LinearLayoutManager mLayoutManager;    CardAdapter mAdapter;    android.os.Handler getHandler = new android.os.Handler() {        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case 1001:                    break;            }            super.handleMessage(msg);        }    };    private int mPage;    private SwipeRefreshLayout swipeRefreshLayout;    private SwipeRefreshLayout subswipeRefreshLayout;    // 是否正在讀取    private boolean isLoading = false;    // 是否已讀取完整資料    private boolean noMoreData = false;    private AdapterView.OnItemLongClickListener lvlongclick = new AdapterView.OnItemLongClickListener() {        @Override        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {            return true;        }    };    public static HistoryFragment newIns(int page) {        Bundle args = new Bundle();        args.putInt(PAGE, page);        HistoryFragment fragment = new HistoryFragment();        fragment.setArguments(args);        return fragment;    }    @Override    public void onResume() {        i = MainActivity.get_login_state();        super.onResume();    }    @Override    public void onStop() {        super.onStop();    }    @Override    public void onDestroyView() {        super.onDestroyView();    }    @Override    public void onPause() {        super.onPause();    }    @Override    public void onCreate(Bundle savedInstanceState) {        // TODO Auto-generated method stub        super.onCreate(savedInstanceState);        mPage = getArguments().getInt(PAGE);        /*mAdapter = new CardAdapter(new ArrayList<HistoryItem>(), new CardAdapter.ViewHolder.ClickHandler() {            @Override            public void onClick(View caller, int position) {                HistoryItem h_2 = mAdapter.getItem(position);            }        });*/    }    @Override    public View onCreateView(LayoutInflater inflater,                             ViewGroup container, Bundle savedInstanceState) {        if (i >= 1) {            View view = inflater.inflate(R.layout.fragment_history, container, false);            //swipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.pullToRefreshRecycler);            /*swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {                @Override                public void onRefresh() {                    mAdapter.clear();                    getActivity();                    noMoreData = false;                }            });*/            mLayoutManager = new LinearLayoutManager(getActivity());            mRecyclerView = (RecyclerView) view.findViewById(R.id.recycler_view_history);            mRecyclerView.setHasFixedSize(true);            mRecyclerView.setLayoutManager(mLayoutManager);            new Thread(new Runnable() {                @Override                public void run() {                    final CardAdapter adapter = new CardAdapter();                    getActivity().runOnUiThread(new Runnable() {                        @Override                        public void run() {                            animator.setAddDuration(2500);                            mRecyclerView.setItemAnimator(animator);                            mRecyclerView.setAdapter(adapter);                        }                    });                }            }).start();            /*mAdapter = new CardAdapter();            mRecyclerView.setAdapter(mAdapter);*/            /*mRecyclerView.setItemAnimator(new DefaultItemAnimator());            mRecyclerView.setOnScrollListener(new RecyclerView.OnScrollListener() {                @Override                public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                    super.onScrolled(recyclerView, dx, dy);                    int visibleItemCount = mLayoutManager.getChildCount();                    int totalItemCount = mLayoutManager.getItemCount();                    int pastVisiblesItems = mLayoutManager.findFirstVisibleItemPosition();                    if(totalItemCount > 10)                    {                        totalItemCount = totalItemCount - 10;                    }                    if (dy < 0)                    {                        return;                    }                    if(!isLoading && !noMoreData)                    {                        if((visibleItemCount + pastVisiblesItems) >= totalItemCount)                        {                            isLoading = true;                            getActivity();                        }                    }                }            });*/            return view;        } else {            View view = inflater.inflate(R.layout.fragment_history_nologin, container, false);            lbl = (TextView) view.findViewById(R.id.his_noligin_lbl);            gotologin = (Button) view.findViewById(R.id.gotologin_his);            gotologin.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Intent go_to_login = new Intent();                    go_to_login.setClass(getContext(), Login_logout.class);                    startActivity(go_to_login);                    onStop();                    onDestroyView();                }            });            return view;        }    }    public void refresh(boolean refreshing)    {        if (swipeRefreshLayout == null) {            return;        }        swipeRefreshLayout.setRefreshing(refreshing);    }    public boolean addItems(ArrayList<HistoryItem> historyItemArrayList) {        return false;    }    /*public class Load_history_card extends AsyncTask<String, String , String >    {        String mark = "";        Boolean done = false;        @Override        protected void onPreExecute() {            super.onPreExecute();            Toast.makeText(getContext(), "載入歷史紀錄中, 請稍後...", Toast.LENGTH_SHORT).show();        }        @Override        protected void onPostExecute(String s) {            super.onPostExecute(s);            Toast.makeText(getContext(), "載入完成!", Toast.LENGTH_SHORT).show();        }        @Override        protected String doInBackground(String... params) {            mAdapter = new CardAdapter();            done = true;            return mark;        }    }*/    public void addFinished() {        isLoading = false;    }    private void change_pic(final View view) {        Runnable r = new Runnable() {            @Override            public void run() {                String result = "刷新成功!";                Message msg = new Message();                msg.what = 1001;                Bundle data = new Bundle();                data.putString("Result", result);                msg.setData(data);                getHandler.sendMessage(msg);            }        };        new Thread(r).start();    }    @Override    public void update(int data) {        i = data;    }    private enum LayoutManagerType {        LINEAR_LAYOUT_MANAGER    }}